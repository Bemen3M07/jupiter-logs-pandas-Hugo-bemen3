Exercici 1
Explica quines comandes de Linux Pots fer servir a l’hora d’analitzar logs escrits a
fitxer per a:
● Veure contínuament els logs que es van escrivint a un arxiu

Para monitorear un archivo de logs en tiempo real, puedes usar el comando tail con la opción -f: 'tail -f nombre_del_archivo.log'
Tambien exsiste el comando 'less +F nombre_del_archivo.log' que también ver en tiempo real, pero además permite navegar por el archivo.

● Cercar una paraula concreta dintre d’un arxiu de log

Para buscar una palabra específica en un archivo de log, puedes usar el comando grep. 'grep 'palabra_clave' nombre_del_archivo.log'
Tambien en caso de que quieras ver solo las líneas nuevas que contienen una palabra concreta, puedes combinar tail con grep. 'tail -f nombre_del_archivo.log | grep 'palabra_clave''

Exercici 2
2. Que creieu que és millor mostrar els logs per exemple a la terminal durant l'execució del programa o bolcar-los en un fitxer de text?  Afegiu al readme.md del repositori aquesta pregunta amb la seva reposta

Volcar los logs a un archivo de texto es mejor, porque permite mantener un historial persistente para análisis, auditorías y resolución de errores, algo esencial en entornos de producción o aplicaciones críticas. 
Además, facilita su integración con herramientas avanzadas de monitoreo y diagnóstico.

3. Omple la següent taula amb expmple, avantantges, i desavantatges de les següents maneres de fer logs:

| Mètode                                   | Exemple                                                                                                     | Avantatges                                                                                   | Desavantatges                                                                                 |
|------------------------------------------|-------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------|
| **Fent servir la configuració per defecte del mòdul logging** | ```python<br>import logging<br>logging.basicConfig(level=logging.INFO)<br>logging.info("Hola Mundo")```       | - Senzill de configurar.<br>- Ideal per a scripts petits o prototips.                       | - Poc flexible.<br>- Difícil d’adaptar a projectes més complexos.<br>- Canvis requereixen modificar codi. |
| **Instanciant un objecte logger i parametritzant-lo des del programa** | ```python<br>import logging<br>logger = logging.getLogger("mi_logger")<br>handler = logging.FileHandler("logs.log")<br>logger.addHandler(handler)<br>logger.info("Info")``` | - Gran flexibilitat.<br>- Permet múltiples loggers independents.<br>- Adaptable a sistemes grans. | - Configuració manual extensa.<br>- Sense organització, el codi es torna menys llegible.                   |
| **Instanciant un objecte logger a partir d’una configuració emmagatzemada a fitxer** | **Fitxer de configuració `logging.conf`:**<br>`[loggers]<br>keys=root`<br>`[handlers]<br>keys=fileHandler`<br>`[formatter_default]<br>format=%(message)s`<br><br>**Codi:**<br>```python<br>import logging.config<br>logging.config.fileConfig('logging.conf')<br>logger = logging.getLogger('root')<br>logger.info("Missatge")``` | - Configuració modular i reutilitzable.<br>- No cal modificar el codi per canviar configuracions.<br>- Escalable per a projectes grans. | - Requereix més aprenentatge inicial.<br>- Necessita mantenir el fitxer de configuració juntament amb el programa. |

4. Cerca llibreries de logs en altres llenguatjes (al menys 2, i identifica cóm resolen les següents característiques típiques d’un sistema de logging.

| **Pregunta**                             | **Lenguaje 1: Python**                     | **Lenguaje 2: Java**                          | **Otro (opcional): JavaScript**              |
|------------------------------------------|--------------------------------------------|-----------------------------------------------|----------------------------------------------|
| **Nombre de la librería**                | Logging                                    | Log4j                                        | Winston                                      |
| **¿Es nativa del lenguaje?**             | Sí                                         | No                                           | No                                           |
| **URL para descargar la librería**       | Incluida en la biblioteca estándar         | [log4j.apache.org](https://logging.apache.org/log4j/2.x/) | [npmjs.com/winston](https://www.npmjs.com/package/winston) |
| **Inicialización del objeto logger**     | `import logging`<br>`logger = logging.getLogger()` | `Logger logger = LogManager.getLogger("MyLogger");` | `const winston = require('winston');`<br>`const logger = winston.createLogger({...});` |
| **Niveles de log disponibles**           | DEBUG, INFO, WARNING, ERROR, CRITICAL      | TRACE, DEBUG, INFO, WARN, ERROR, FATAL       | error, warn, info, http, verbose, debug, silly |
| **Método para hacer log**                | `logger.info("Mensaje")`                  | `logger.info("Mensaje");`                    | `logger.info("Mensaje");`                    |
| **Tipos de manejadores (pantalla, archivo...)** | StreamHandler, FileHandler, etc.          | ConsoleAppender, FileAppender, RollingFileAppender | Console, File, HTTP, etc.                   |
| **Opciones de formato**                  | Soporte para definir formatos como `'%(asctime)s - %(levelname)s - %(message)s'` | Configurable con patrones como `%d, %p, %m`  | Configurable con JSON o plantillas de texto  |

Exercici 3

Pandas
Funcionalitat: Pandas és una llibreria de Python especialment útil per a la manipulació i anàlisi de dades. Permet treballar amb dades tabulars en formats com CSV, JSON i Excel. Les seves principals funcionalitats inclouen:

Lectura i escriptura de fitxers (CSV, JSON, Excel, etc.).
Manipulació de dades mitjançant DataFrames (estructura de dades semblant a una taula).
Transformació i neteja de dades.
Agrupació i agregació de dades per a anàlisis més complexes.
Integració amb altres llibreries per visualització gràfica (com Matplotlib o Seaborn).

import pandas as pd
# Cargar un archivo CSV
df = pd.read_csv("datos.csv")
# Mostrar las primeras filas
print(df.head())

2. Jupyter Notebook
Funcionalidad:
Jupyter Notebook es una aplicación web que permite escribir y ejecutar código en celdas interactivas, combinando texto descriptivo y resultados de ejecución en un solo documento. Ideal para:

Documentar análisis de datos paso a paso.
Prototipar visualizaciones y procesos.
Crear informes interactivos que combinen código, texto y gráficos.
Ejemplo de uso: Una celda básica para generar gráficos sería:

import matplotlib.pyplot as plt
plt.plot([1, 2, 3], [4, 5, 6])
plt.show()


Aquí tienes una versión en castellano sobre las herramientas Pandas, Jupyter Notebook y ReportLab, con detalles sobre sus funcionalidades, pruebas sugeridas y la justificación de su uso en un proyecto para trabajar con datos y generar gráficos:

Funcionalidad de cada herramienta
1. Pandas
Funcionalidad:
Pandas es una biblioteca de Python diseñada para manipular y analizar datos de forma eficiente. Permite trabajar con formatos como CSV, JSON o Excel, ofreciendo funcionalidades clave como:

Lectura y escritura de archivos de datos (CSV, JSON, etc.).
Gestión de estructuras de datos tabulares mediante DataFrames.
Limpieza, transformación y análisis de datos.
Agrupaciones y cálculos estadísticos.
Integración con otras bibliotecas para visualización (Matplotlib, Seaborn).
Ejemplo de uso:

python
Copiar código
import pandas as pd
# Cargar un archivo CSV
df = pd.read_csv("datos.csv")
# Mostrar las primeras filas
print(df.head())
2. Jupyter Notebook
Funcionalidad:
Jupyter Notebook es una aplicación web que permite escribir y ejecutar código en celdas interactivas, combinando texto descriptivo y resultados de ejecución en un solo documento. Ideal para:

Documentar análisis de datos paso a paso.
Prototipar visualizaciones y procesos.
Crear informes interactivos que combinen código, texto y gráficos.
Ejemplo de uso: Una celda básica para generar gráficos sería:

python
Copiar código
import matplotlib.pyplot as plt
plt.plot([1, 2, 3], [4, 5, 6])
plt.show()
Al ejecutarla, el gráfico aparecerá directamente en el navegador.

3. ReportLab
Funcionalidad:
ReportLab es una biblioteca para generar documentos PDF mediante código Python. Es útil para:

Crear informes automatizados personalizados.
Insertar gráficos, tablas y textos dinámicos en documentos PDF.
Generar documentos visualmente atractivos de forma programática.
Ejemplo de uso:

from reportlab.pdfgen import canvas

c = canvas.Canvas("informe.pdf")
c.drawString(100, 750, "Informe de Datos")
c.save()


